---
export const prerender = true;
import {fetchThreeHundred, fetchOneHundred, fetchTwoHundred, fetchFeaturedListings} from '../pages/api/fetch.ts';
import ListingPageDetail from '../components/ListingPageDetail.astro';

export async function getStaticPaths() {
  const [threeHundredListings, oneHundredListings, twoHundredListings, featuredListings] = await Promise.all([
    fetchThreeHundred(),
    fetchOneHundred(),
    fetchTwoHundred(),
    fetchFeaturedListings()
  ]);

  const listings = [...threeHundredListings, ...oneHundredListings, ...twoHundredListings, ...featuredListings];
  const paths = listings.map((listings: any) => ({
    params: {
      listingPage: listings._id // Ensure this matches the requested path
    },
    props: {
      title: listings.title,
      PropertyType: listings.propertyType,
      bathrooms: listings.bathrooms,
      pictures: listings.pictures,
      beds: listings.beds,
      Description: listings.publicDescription,
      listingId: listings._id
    }
  }));

  // console.log("Generated paths:", JSON.stringify(paths, null, 2)); // Log the generated paths

  return paths; // Return the array of paths directly
}

export async function get({ params }) {
  const listings = await fetchThreeHundred(); // Fetch listings again to find the specific one
  const listing = listings.find((listings : any) => listings._id === params.listingPage);

  if (!listing) {
    return {
      status: 404,
      body: 'Not Found'
    };
  }

  // Set Cache-Control headers
  // Browser cache: 1 hour (3600 seconds)
  // CDN cache: 1 hour (3600 seconds)
  // Stale-while-revalidate: 1 day (86400 seconds)
  Astro.response.headers.set("Cache-Control", "public, max-age=3600, s-maxage=3600");
  Astro.response.headers.set(
    "Netlify-CDN-Cache-Control", "public, durable, s-maxage=3600, stale-while-revalidate=86400"
  );

  return {
  title: listings.title,
  city: listings.address.city,
  state: listings.address.state,
  Description: listings.publicDescription,
  PropertyType: listings.propertyType,
  bathrooms: listings.bathrooms,
  pictures: listings.pictures,
  beds: listings.beds,
  listingId: listings._id
  };
}

const { title, pictures, Description, beds, bathrooms, listingId } = Astro.props;



---

<ListingPageDetail
          title={title}
          Description={Description}
          bathrooms={bathrooms}
          beds={beds}
          pictures={pictures}
          listingId={listingId}
        />