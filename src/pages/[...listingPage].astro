---
export const prerender = true;
import { amenitiesIcons } from "../lib/amenitiesIcons";
import { loadIcon } from "../lib/iconLoader";
import { Icon } from "astro-icon/components";
import Layout from "@layouts/Default.astro";
import Section from "@components/Section.astro";
import InquireForm from "@components/InquireForm";
import InstantBooking from "@components/InstantBooking.tsx";
import { fetchAllListings } from "./api/dataFetcher";
import SwiperComponent from "@components/SwiperComponent.tsx";
import { BedDouble } from "lucide-react";
import BedTypes from "@components/ui/BedTypes.tsx";
import ImageGallery from "@components/ImageGallery.tsx";
import AirReviews from "@components/AirReviews.tsx";
import ReservationForm from "@components/ReservationForm.tsx";

export async function getStaticPaths() {
  const listings = await fetchAllListings();
  const paths = await Promise.all(
    listings.map(async (listing: any) => {
      return {
        params: {
          listingPage: listing._id,
        },
        props: {
          _id: listing._id,
          street: listing.address.street,
          apt: listing.address.apt,
          city: listing.address.city,
          state: listing.address.state,
          zip: listing.address.zip,
          country: listing.address.country,
          title: listing.title,
          PropertyType: listing.propertyType,
          amenities: listing.amenities,
          otherAmenities: listing.otherAmenities,
          bathrooms: listing.bathrooms,
          pictures: listing.pictures,
          beds: listing.listingRooms,
          bedsCount: listing.beds,
          Description: listing.publicDescription,
          listingId: listing._id,
          bedrooms: listing.bedrooms,
          checkIn: listing.defaultCheckInTime,
          checkOut: listing.defaultCheckOutTime,
        },
      };
    }),
  );

  return paths;
}

function filterAmenities(mergedAmenities: any[], allAmenities: any[]) {
  return mergedAmenities.filter((amenity) => allAmenities.includes(amenity));
}

export async function get({ params }) {
  const listings = await fetchAllListings();
  const listing = listings.find(
    (listing: any) => listing._id === params.listingPage,
  );

  if (!listing) {
    return {
      status: 404,
      body: "Not Found",
    };
  }

  const allAmenities = listing.amenities;
  const mergedAmenities = [...listing.amenities, ...listing.otherAmenities];
  const filteredAmenities = filterAmenities(mergedAmenities, allAmenities);

  Astro.response.headers.set(
    "Cache-Control",
    "public, max-age=3600, s-maxage=3600",
  );
  Astro.response.headers.set(
    "Netlify-CDN-Cache-Control",
    "public, durable, s-maxage=3600, stale-while-revalidate=86400",
  );

  return {
    _id: listing._id,
    title: listing.title,
    apt: listing.address.apt,
    city: listing.address.city,
    state: listing.address.state,
    street: listing.address.street,
    zip: listing.address.zip,
    country: listing.address.country,
    Description: listing.publicDescription,
    amenities: filteredAmenities,
    PropertyType: listing.propertyType,
    bathrooms: listing.bathrooms,
    pictures: listing.pictures,
    beds: listing.listingRooms,
    bedsCount: listing.beds,
    listingId: listing._id,
    bedrooms: listing.bedrooms,
    checkIn: listing.defaultCheckInTime,
    checkOut: listing.defaultCheckOutTime,
  };
}

const {
  _id,
  title,
  pictures,
  city,
  state,
  street,
  country,
  zip,
  Description,
  apt,
  beds,
  bedsCount,
  amenities,
  bathrooms,
  listingId,
  PropertyType,
  checkIn,
  checkOut,
  bedrooms,
} = Astro.props;

function capitalizeFirstLetter(string: string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
---

<Layout title="Property Details">
  <main id="PropertyDetails">
    <Section>
      <div class="xs:px-1 sm:px-1 w-full mx-auto max-w-full mt-12 md:px-8">
        <div class="pb-12 mb-12">
          <section class="relative border-b border-muted-200 pb-12">
            <!-- breadcrumb -->
            <span class="relative mb-0 pb-0 md:hidden"
              ><SwiperComponent pictures={pictures} client:load /></span
            >
            <nav class="mb-6 mt-0 md:mt-28" aria-label="breadcrumbs">
              <ul class="flex items-center xs:justify-center">
                <li class="flex items-center">
                  <a href="/" class="hover:text-cyan-600 pe-3 text-muted-400">
                    <Icon name="lucide:home" />
                  </a>
                </li>
                <li
                  class="flex items-center before:content-['/'] before:text-muted-400"
                >
                  <a
                    href="/properties"
                    class="hover:text-cyan-600 px-3 text-muted-400"
                    >Properties</a
                  >
                </li>
                <li
                  class="is-active flex items-center before:content-['/'] before:text-muted-400"
                >
                  <a
                    href="#"
                    class="px-3 text-muted-400"
                    href="#"
                    aria-current="page">Details</a
                  >
                </li>
              </ul>
            </nav>
            <!-- property details title -->
            <div
              class="flex flex-col md:flex-row items-end justify-between mb-6"
            >
              <!-- left -->
              <div class="left mb-8 md:m-0">
                <h2
                  class="leading-9 text-3xl font-light font-sans text-muted-900 mb-2 xs:text-center"
                >
                  {title}
                </h2>
                <div
                  class="flex xs:justify-center gap-4 text-base text-muted-900"
                >
                  <h2
                    class="leading-9 text-xl font-light font-sans text-muted-900 mb-2 xs:text-center"
                  >
                    {street}
                    , {city}, {state}
                    {zip}, {country}
                  </h2>
                  <a
                    href="#"
                    class="flex items-center font-medium relative underline-offset-4 hover:underline"
                  ></a>
                </div>
              </div>
              <!-- right -->
              <div
                class="flex flex-col justify-center xs:items-center md:items-end xs:w-full"
              >
                <a
                  href="javascript:void(0);"
                  class="gap-1 flex items-start font-medium px-3 py-1 rounded bg-zinc-300"
                  onclick="shareListing()"
                >
                  <Icon name="h-4 aspect-square" name="lucide:share-2" />
                  <span class="relative">Share</span>
                </a>
                <div id="fallback-share" class="mt-4"></div>
              </div>
            </div>
            <!-- property details -->
            <div
              class="flex flex-col md:flex-row items-start justify-start mb-2 w-full"
            >
              <div
                class="flex flex-col md:flex-row justify-normal gap-32 w-full mr-16"
              >
                <div
                  class="hidden md:flex gap-1 justify-start items-start w-3/4 h-full"
                >
                  <div class="w-full">
                    <img
                      class="block w-full h-fit object-cover"
                      src={pictures[0].original}
                      alt="Main image"
                      width={2000}
                      height={1200}
                      data-zoom
                      loading="lazy"
                    />
                  </div>
                  <div
                    class="flex flex-col items-start h-screen mt-1 w-1/5 overflow-y-auto no-scrollbar"
                  >
                    <ImageGallery pictures={pictures} client:only="react" />
                  </div>
                </div>

                <!-- right -->
                <div
                  class="xs:hidden sm:hidden md:flex w-full max-w-max flex-col justify-stretch items-stretch mt-6"
                >
                  <span class="xs:hidden">
                    <InquireForm
                      listingId={listingId}
                      buttonText="Chat with a property Agent"
                      client:load
                    />
                  </span>
                  <div
                    id="main"
                    class="flex flex-col flex-nowrap justify-center items-center w-full"
                  >
                    <div class="flex gap-2 w-full justify-center items-center">
                      <p>
                        <span class="font-bold w-full">Check in: </span>{
                          checkIn
                        }
                      </p>
                      <p>
                        <span class="font-bold text-base w-full"
                          >Check Out:
                        </span>{checkOut}
                      </p>
                    </div>
                    <span
                      class="text-base font-light flex justify-center items-center gap-1"
                    >
                      <span class="font-bold text-base">Note: </span> Checkin and
                      Checkout times are in UTC.
                    </span>
                    <InstantBooking listingId={listingId} client:only="react" />
                    <h4
                      class="text-2xl mt-6 font-bold font-sans text-slate-900"
                    >
                      Amenities
                    </h4>

                    <div
                      class="mb-3 grid grid-cols-2 gap-2 justify-items-center"
                    >
                      <!-- bedroom -->
                      <div class="flex flex-col">
                        <div
                          class="flex items-center gap-2 text-muted-900 dark:text-white"
                        >
                          <p class="text-lg font-bold">{PropertyType}</p>
                        </div>
                        <p class="text-sm text-muted-400">Property Type</p>
                      </div>
                      <!-- bathroom -->
                      <div class="flex flex-col">
                        <div
                          class="flex items-center gap-2 text-muted-900 dark:text-white"
                        >
                          <svg
                            class="size-4"
                            xmlns="http://www.w3.org/2000/svg"
                            width="24"
                            height="24"
                            viewBox="0 0 24 24"
                            fill="none"
                            stroke="currentColor"
                            stroke-width="2"
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            style="--darkreader-inline-stroke: currentColor;"
                            data-darkreader-inline-stroke=""
                            ><path
                              d="M9 6 6.5 3.5a1.5 1.5 0 0 0-1-.5C4.683 3 4 3.683 4 4.5V17a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5"
                            ></path><line x1="10" y1="5" x2="8" y2="7"
                            ></line><line x1="2" y1="12" x2="22" y2="12"
                            ></line><line x1="7" y1="19" x2="7" y2="21"
                            ></line><line x1="17" y1="19" x2="17" y2="21"
                            ></line>
                          </svg>
                          <p class="text-lg font-bold">{bathrooms}</p>
                        </div>
                        <p class="text-sm text-muted-400">Bathrooms</p>
                      </div>
                    </div>
                    <div class="">
                      <BedTypes beds={beds} client:only="react" />
                    </div>

                    <div
                      class="flex flex-col gap-4 pb-6 mb-6 border-b border-muted-200 dark:border-muted-800"
                    >
                      <span class="sm:hidden mt-12">
                        <InquireForm
                          listingId={listingId}
                          buttonText="Chat with a property Agent"
                          client:load
                        />
                      </span>
                    </div>
                  </div>
                </div>
              </div>
              <!-- mobile -->
              <div
                class="md:hidden flex w-full flex-col justify-start items-center px-7 md:px-2"
              >
                <span class="xs:hidden">
                  <InquireForm
                    listingId={listingId}
                    buttonText="Chat with a property Agent"
                    client:load
                  />
                </span>
                <div
                  id="main"
                  class="flex flex-col justify-center items-center md:w-full"
                >
                  <div class="flex gap-2 w-full justify-center items-center">
                    <p>
                      <span class="font-bold w-full">Check in: </span>{checkIn}
                    </p>
                    <p>
                      <span class="font-bold w-full">Check Out: </span>{
                        checkOut
                      }
                    </p>
                  </div>
                  <span
                    class="text-sm font-light flex justify-center items-center gap-1"
                  >
                    <span class="font-bold">Note: </span> Checkin and Checkout times
                    are in UTC.
                  </span>

                  <InstantBooking listingId={listingId} client:only="react" />
                  <!-- <BookingFormWrapper
                      listingId={listingId}
                      client:only="react"
                    /> -->
                  <h4 class="text-2xl mt-6 font-bold font-sans text-slate-900">
                    Amenities
                  </h4>

                  <div class="mb-6 grid grid-cols-2 gap-2 justify-items-center">
                    <!-- bedroom -->

                    <!-- bathroom -->
                    <div class="flex flex-col">
                      <div
                        class="flex items-center gap-2 text-muted-900 dark:text-white"
                      >
                        <svg
                          class="size-4"
                          xmlns="http://www.w3.org/2000/svg"
                          width="24"
                          height="24"
                          viewBox="0 0 24 24"
                          fill="none"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          style="--darkreader-inline-stroke: currentColor;"
                          data-darkreader-inline-stroke=""
                          ><path
                            d="M9 6 6.5 3.5a1.5 1.5 0 0 0-1-.5C4.683 3 4 3.683 4 4.5V17a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-5"
                          ></path><line x1="10" y1="5" x2="8" y2="7"
                          ></line><line x1="2" y1="12" x2="22" y2="12"
                          ></line><line x1="7" y1="19" x2="7" y2="21"
                          ></line><line x1="17" y1="19" x2="17" y2="21"></line>
                        </svg>
                        <p class="text-lg font-bold">{bathrooms}</p>
                      </div>
                      <p class="text-sm text-muted-400">Bathrooms</p>
                    </div>

                    <div class="flex flex-col">
                      <div
                        class="flex items-center gap-2 text-muted-900 dark:text-white"
                      >
                        <p class="text-lg font-bold">{PropertyType}</p>
                      </div>
                      <p class="text-sm text-muted-400">Propert Type</p>
                    </div>
                  </div>

                  <div class="flex justify-center">
                    <BedTypes beds={beds} client:only="react" />
                  </div>

                  <div
                    class="flex flex-col gap-4 pb-6 mb-6 border-b border-muted-200 dark:border-muted-800"
                  >
                    <!-- <div
                          class="flex items-center gap-2 justify-between text-sm"
                        >
                          <p class="text-muted-400">Type</p>
                          <p class="text-muted-900">{PropertyType}</p>
                        </div> -->

                    <span class="sm:hidden mt-12">
                      <InquireForm
                        listingId={listingId}
                        buttonText="Chat with a property Agent"
                        client:load
                      />
                    </span>
                  </div>
                </div>
              </div>
            </div>
            <!-- property content -->
            <div class="relative" x-data="{ activeTab: 'tab-1' }">
              <div
                class="tabs mb-6 max-w-fit flex flex-wrap text-base justify-between"
              >
                <ul
                  class="flex max-w-fit items-center flex-grow border-b dark:border-muted-800 border-muted-200 list-none"
                >
                  <li
                    :class="activeTab === 'tab-1' && 'is-active [&>a]:border-b-2 [&>a]:border-cyan-500 [&>a]:text-muted-900 dark:[&>a]:text-white'"
                  >
                    <a
                      @click.prevent="activeTab = 'tab-1'"
                      class="flex justify-center items-center py-2 px-4 border-b border-transparent text-muted-400 cursor-pointer no-underline -mb-px"
                      >Description</a
                    >
                  </li>
                  <li
                    :class="activeTab === 'tab-2' && 'is-active [&>a]:border-b-2 [&>a]:border-cyan-500 [&>a]:text-muted-900 dark:[&>a]:text-white'"
                  >
                    <a
                      @click.prevent="activeTab = 'tab-2'"
                      class="flex justify-center items-center py-2 px-4 border-b border-transparent text-muted-400 cursor-pointer no-underline -mb-px"
                      >Amenities</a
                    >
                  </li>
                  <li
                    :class="activeTab === 'tab-3' && 'is-active [&>a]:border-b-2 [&>a]:border-cyan-500 [&>a]:text-muted-900 dark:[&>a]:text-white'"
                  >
                    <a
                      @click.prevent="activeTab = 'tab-3'"
                      class="flex justify-center items-center py-2 px-4 border-b border-transparent text-muted-400 cursor-pointer no-underline w-full"
                      >Comments</a
                    >
                  </li>
                </ul>
              </div>
              <div
                x-cloak
                x-show="activeTab === 'tab-1'"
                class="relative md:w-2/3"
              >
                {
                  Description?.summary && (
                    <>
                      <p class="text-muted-500 text-base xs:text-center">
                        {Description.summary}
                      </p>
                      <br />
                    </>
                  )
                }

                {
                  Description?.space && (
                    <>
                      <p class="text-muted-500 text-base xs:text-center">
                        {Description.space}
                      </p>
                      <br />
                    </>
                  )
                }

                {
                  Description?.notes && (
                    <>
                      <p class="text-muted-500 text-base xs:text-center">
                        {Description.notes}
                      </p>
                      <br />
                    </>
                  )
                }

                {
                  Description?.access && (
                    <>
                      <p class="text-muted-500 text-base xs:text-center">
                        {Description.access}
                      </p>
                    </>
                  )
                }
              </div>
              <div x-cloak x-show="activeTab === 'tab-2'" class="relative">
                <div class="boxed-amenities flex flex-wrap justify-start gap-3">
                  <!-- Amenity -->
                  <div
                    class="dark:border-muted-800 text-center p-5 border border-muted-200 dark:bg-muted-950 bg-white"
                  >
                    <div
                      class="font-bold gap-2 flex justify-center items-center text-muted-900"
                    >
                      <div class="flex flex-wrap gap-4">
                        {
                          amenities.map((amenity: string) => {
                            const iconName = amenitiesIcons[amenity];
                            const IconComponent = loadIcon(iconName);
                            console.log(
                              `Loading icon for ${amenity}:`,
                              iconName,
                              IconComponent,
                            );
                            return (
                              <div class="dark:border-muted-800 text-center p-5 border border-muted-200 dark:bg-muted-950 bg-white">
                                <div class="font-bold gap-2 flex justify-center items-center text-muted-900">
                                  {IconComponent ? (
                                    <IconComponent class="text-2xl h-6" />
                                  ) : null}
                                  {amenity}
                                </div>
                              </div>
                            );
                          })
                        }
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div
                x-cloak
                x-show="activeTab === 'tab-3'"
                class="relative w-full"
              >
                <AirReviews listingId={listingId} client:idle />
              </div>

              <!-- Display the review comments in two columns -->
              <div
                class="flex flex-wrap items-start justify-start gap-y-8 gap-x-6"
              >
              </div>
            </div>
          </section>
        </div>
      </div>

      <!-- cards -->
      <div class="mt-12">
        <div class="flex flex-col">
          <!-- <h2
                  class="font-sans text-2xl text-muted-900 text-center dark:text-white xs:text-center"
                >
                  You might also like
                </h2>
                <p
                  class="text-muted-500 dark:text-muted-400 text-center leading-6 xs:text-center"
                >
                  Based on your previous matches
                </p> -->
          <!-- <div
                  class="py-3 md:px-24 px-3 grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6"
                >
                  <GuestyListings />
                </div> -->
        </div>
        <div class="py-8 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- {properties.slice(0, 3).map((property) => <PropertyCard {...property} />)} -->
        </div>
      </div>
    </Section>
  </main>
</Layout>

<script is:inline>
  function shareListing() {
    const shareData = {
      title: document.title,
      text: "Check out this property!",
      url: window.location.href,
    };

    if (navigator.share) {
      navigator
        .share(shareData)
        .then(() => console.log("Successful share"))
        .catch((error) => console.log("Error sharing", error));
    } else {
      // Fallback for browsers that do not support navigator.share
      const shareUrl = encodeURIComponent(window.location.href);
      const shareText = encodeURIComponent("Check out this property!");
      const emailLink = `mailto:?subject=${shareData.title}&body=${shareText}%20${shareUrl}`;
      const facebookLink = `https://www.facebook.com/sharer/sharer.php?u=${shareUrl}`;
      const twitterLink = `https://twitter.com/intent/tweet?text=${shareText}&url=${shareUrl}`;
      const smsLink = `sms:?body=${shareText}%20${shareUrl}`;

      // Display fallback share options
      const fallbackShareOptions = `
          <div class="share-options">
            <a href="${emailLink}" target="_blank">Email</a>
            <a href="${facebookLink}" target="_blank">Facebook</a>
            <a href="${twitterLink}" target="_blank">Twitter</a>
            <a href="${smsLink}" target="_blank">SMS</a>
            <button onclick="copyToClipboard('${shareUrl}')">Copy Link</button>
          </div>
        `;
      document.getElementById("fallback-share").innerHTML =
        fallbackShareOptions;
    }
  }

  function copyToClipboard(text) {
    navigator.clipboard
      .writeText(text)
      .then(() => {
        alert("Link copied to clipboard");
      })
      .catch((error) => {
        console.error("Error copying text: ", error);
      });
  }
</script>
